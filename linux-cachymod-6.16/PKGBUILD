# PKGBUILD originated from CachyOS, modified for CachyMod.
# https://github.com/marioroy/cachymod
# https://wiki.archlinux.org/title/PKGBUILD

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null or choose proper variable to enable them

# Custom kernel suffix
# Specify string or set to "auto" for automatic suffix {gcc,clang,lto}
# Set to blank value for no kernel suffix
: "${_kernel_suffix:=}"

# Prevent AVX2 floating-point instructions. (Clear and XanMod default)
: "${_prevent_avx2:=yes}"

# Run the "trim.sh" script to trim the kernel
# Deselects ~ 1,500 kernel options
: "${_runtrim_script:=yes}"

# Tweak kernel options prior to a build via nconfig, gconfig or xconfig
: "${_makenconfig:=no}"
: "${_makegconfig:=no}"
: "${_makexconfig:=no}"

# Transparent Hugepages
# ATTENTION: one of two predefined values should be selected!
# 'always'  - always enable THP
# 'madvise' - madvise, prevent applications from allocating more memory resources than necessary
# More infos here:
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/performance_tuning_guide/sect-red_hat_enterprise_linux-performance_tuning_guide-configuring_transparent_huge_pages
: "${_hugepage:=always}"

# Compile ONLY used modules to VASTLY reduce the number of modules built
# and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD read the database kept if it exists
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
: "${_localmodcfg:=no}"

# Path to the list of used modules
: "${_localmodcfg_path:=$HOME/.config/modprobed.db}"

# Include the modules in minimal-modprobed.db (use with _localmodcfg)
: "${_localmodcfg_minimal:=no}"

# Enable TCP_CONG_BBR3
: "${_tcp_bbr3:=no}"

# Running with a 1000HZ, 800Hz, 750Hz, 600Hz, or 500Hz tick rate
: "${_HZ_ticks:=1000}"

# Choose between full or idle tickless type
# Full tickless can give higher performances in various cases but, depending on
# hardware, lower consistency. Idle (without rcu_nocb_cpu) may reduce stutters.
: "${_ticktype:=full}"

# Choose between rt (real-time), full (low-latency), lazy (prefer throughput),
# or dynamic (runtime selectable none, voluntary, full, or lazy: default full)
: "${_preempt:=dynamic}"

# Select CPU compiler optimization
# { generic, generic_v1, generic_v2, generic_v3, generic_v4, native, zen4 }
: "${_processor_opt:=}"

# Select build type { full, thin, clang, gcc }
# full:  Build the kernel with clang full-LTO, suffix "-lto"
#        Uses 1 thread for linking, slow and uses more memory (>16GB),
#        theoretically with the highest performance gains
# thin:  Build the kernel with clang thin-LTO, suffix "-lto"
#        Uses multiple threads, faster and lesser memory consumption,
#        possibly lower runtime performance than full
# clang: Build kernel with clang, suffix "-clang"
# gcc:   Build kernel with gcc, suffix "-gcc"
: "${_buildtype:=thin}"

# Build a debug package with non-stripped vmlinux
: "${_build_debug:=no}"

# Enable AUTOFDO_CLANG for the first compilation,
#  to create a kernel, which can be used for profiling
# Workflow:
#  https://cachyos.org/blog/2411-kernel-autofdo/
#  https://docs.kernel.org/dev-tools/autofdo.html
# Steps:
# 1. Compile Kernel with _build_debug=yes and _autofdo=yes
# 2. Boot the kernel in QEMU or on your system, see Workload
# 3. Profile the kernel and convert the profile, see Generating...
# 4. Put the profile into the source dir
# 5. Build kernel again with _autofdo_profile_name specified
: "${_autofdo:=yes}"

# Name for the AutoFDO profile
: "${_autofdo_profile_name:=cachymod.afdo}"


# ATTENTION: Do not modify after this line

if [[ "$_buildtype" =~ ^(gcc|clang)$ ]]; then
    _autofdo="no"
    _autofdo_profile_name=""
fi

[[ "$_buildtype" =~ ^(thin|full)$ ]] \
    && buildtype="lto" || buildtype="$_buildtype"

if [ "$_kernel_suffix" = "auto" ]; then
    kernel_suffix="$buildtype"
elif [ -n "$_kernel_suffix" ]; then
    kernel_suffix="$_kernel_suffix"
else
    kernel_suffix=""
fi

if [ "$_preempt" = "rt" ]; then
    kernel_suffix="${kernel_suffix:+$kernel_suffix-}rt"
fi

_pkgsuffix=cachymod
_major=6.16
_minor=12
pkgver=${_major}.${_minor}
_stable=${_major}.${_minor}
#_stable=${_major}

_srcname=linux-${_stable}
pkgdesc='CachyMod Linux Kernel with other patches and improvements'
pkgrel=1
_kernver="$pkgver-$pkgrel"
_kernuname="${pkgver}-${_pkgsuffix}"
arch=('x86_64')
url="https://github.com/marioroy/cachymod"
license=('GPL-2.0-only')
options=('!strip' '!debug' '!lto')

makedepends=(bc cpio gettext libelf pahole perl python tar xz zstd)

source=(
  # "https://github.com/torvalds/linux/archive/refs/tags/v${_major}-${_rcver}.tar.gz"
    "https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
    "config"
    "config.sh"
    "trim.sh"
    "minimal-modprobed.db"
    "0001-dl-server-prerequisite.patch"
    "0001-rt.patch"
    "0001-cachyos-base-all.patch"
    "0002-kconfig-add-800Hz.patch"
    "0100-mm-kconfig-enable-rt-thp.patch"
    "0110-fair-drm-scheduler.patch"
    "0200-clearlinux-extras.patch"
    "0210-cachymod-misc.patch"
    "0250-dl-server-for-ext-tasks.patch"
    "0280-fair-update-cachy-mods.patch"
    "0300-x86-prevent-avx2-vector.patch"
)

# LLVM makedepends
if [[ "$buildtype" =~ (lto|clang) ]]; then
    makedepends+=( clang llvm lld )
    source+=("dkms-clang.patch" "flags-clang.patch" "thindist.patch")

    BUILD_FLAGS=( CC=clang LD=ld.lld LLVM_IAS=1 )
    CLANG_BIN=$(which clang) ; CLANG_BIN="${CLANG_BIN%clang}"
    [ "$CLANG_BIN" = "/usr/bin/" ] && BUILD_FLAGS+=( LLVM=1 )

    if [[ "$CLANG_BIN" != "/usr/bin/" && -x "${CLANG_BIN}/llvm-strip" ]]; then
        BUILD_FLAGS+=( LLVM="$CLANG_BIN" )
    else
        BUILD_FLAGS+=( LLVM=1 )
    fi
else
    BUILD_FLAGS=( CC=gcc )
fi

_die() { error "$@" ; exit 1; }

# Use generated AutoFDO Profile
if [[ "$_autofdo" =~ ^(yes|y|1)$ && -n "$_autofdo_profile_name" ]]; then
    if [ -e "$_autofdo_profile_name" ]; then
        source+=("$_autofdo_profile_name")
    else
        _die "Failed to find file ${_autofdo_profile_name}"
    fi
fi

# Append extra sources in build.sh
[ -n "$_extra_patch_or_url0" ] && source+=("$_extra_patch_or_url0")
[ -n "$_extra_patch_or_url1" ] && source+=("$_extra_patch_or_url1")
[ -n "$_extra_patch_or_url2" ] && source+=("$_extra_patch_or_url2")
[ -n "$_extra_patch_or_url3" ] && source+=("$_extra_patch_or_url3")
[ -n "$_extra_patch_or_url4" ] && source+=("$_extra_patch_or_url4")
[ -n "$_extra_patch_or_url5" ] && source+=("$_extra_patch_or_url5")
[ -n "$_extra_patch_or_url6" ] && source+=("$_extra_patch_or_url6")
[ -n "$_extra_patch_or_url7" ] && source+=("$_extra_patch_or_url7")
[ -n "$_extra_patch_or_url8" ] && source+=("$_extra_patch_or_url8")
[ -n "$_extra_patch_or_url9" ] && source+=("$_extra_patch_or_url9")

if [ -s "custom.sh" ]; then
    custom_script="$(pwd)/custom.sh"
else
    custom_script=""
fi

pkgbase="linux-$_pkgsuffix"
if [ -n "$kernel_suffix" ]; then
    pkgbase="${pkgbase}-${kernel_suffix}"
fi

export KBUILD_BUILD_HOST=cachyos
export KBUILD_BUILD_USER="$pkgbase"
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
    cd "$_srcname"

    echo "Setting version..."
    echo "-$pkgrel" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname

    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        src="${src##*/}"
        src="${src%.zst}"
        [[ $src = *.patch ]] || continue
        if [[ $src = *-prevent-avx2* ]]; then
            [[ "$_prevent_avx2" =~ ^(yes|y|1)$ ]] || continue
        fi
        echo "Applying patch $src..."
        patch -Np1 < "../$src"
    done

    echo "Setting config..."
    cp ../config .config

    ### Remove RT version file
    rm -f localversion-rt

    ### Select CPU optimization (default Generic)
    if [ -n "$_processor_opt" ]; then
        MARCH="${_processor_opt^^}"
        if [ "$MARCH" != "GENERIC" ]; then
            if [[ "$MARCH" =~ GENERIC_V[1-4] ]]; then
                X86_64_LEVEL="${MARCH//GENERIC_V}"
                echo "Selecting CPU (X86_64_VERSION) : ${X86_64_LEVEL}"
                scripts/config --set-val X86_64_VERSION "${X86_64_LEVEL}"
            elif [ "$MARCH" = "NATIVE" ]; then
                echo "Selecting CPU (MARCH) : ${MARCH}"
                scripts/config -d GENERIC_CPU -e X86_NATIVE_CPU
            elif [ "$MARCH" = "ZEN4" ]; then
                echo "Selecting CPU (MARCH) : ${MARCH}"
                scripts/config -d GENERIC_CPU -e "M${MARCH}"
            fi
        fi
    else
        echo "Selecting CPU (MARCH) : NATIVE"
        scripts/config -d GENERIC_CPU -e X86_NATIVE_CPU
    fi

    ### Selecting CachyOS config
    echo "Enabling CachyOS config..."
    scripts/config -e CACHY

    ### Select build type
    [ -z "$_buildtype" ] && _die "The value is empty. Choose the correct one again."

    case "$_buildtype" in
        thin)
            scripts/config -e LTO -e LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG_THIN -e HAS_LTO_CLANG -d LTO_NONE -d LTO_CLANG_FULL -d LTO_CLANG_THIN -e LTO_CLANG_THIN_DIST -e HAVE_GCC_PLUGINS
            ;;
        full)
            scripts/config -e LTO -e LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG_THIN -e HAS_LTO_CLANG -d LTO_NONE -e LTO_CLANG_FULL -d LTO_CLANG_THIN -d LTO_CLANG_THIN_DIST -e HAVE_GCC_PLUGINS
            ;;
        clang)
            scripts/config -e LTO -e LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG_THIN -e HAS_LTO_CLANG -e LTO_NONE -d LTO_CLANG_FULL -d LTO_CLANG_THIN -d LTO_CLANG_THIN_DIST -e HAVE_GCC_PLUGINS
            ;;
        gcc)
            scripts/config -e LTO_NONE
            ;;
        *)
            _die "The value '$_buildtype' is invalid. Choose the correct one again."
    esac

    if [ "$buildtype" = "lto" ]; then
        echo "Selecting 'clang' compiler, '$_buildtype' LLVM level..."
    else
        echo "Selecting '$_buildtype' compiler, no LTO..."
    fi

    ### Select tick rate
    [ -z "$_HZ_ticks" ] && _die "The value is empty. Choose the correct one again."

    case "$_HZ_ticks" in
        1000|800|750|600|500)
            scripts/config -d HZ_800 -d HZ_300 -e "HZ_${_HZ_ticks}" --set-val HZ "${_HZ_ticks}";;
        *)
            _die "The value $_HZ_ticks is invalid. Choose the correct one again."
    esac

    echo "Setting tick rate to ${_HZ_ticks} Hz..."

    ### Select tickless type
    [ -z "$_ticktype" ] && _die "The value is empty. Choose the correct one again."

    case "$_ticktype" in
        full)
            scripts/config -d HZ_PERIODIC -d NO_HZ_IDLE -d CONTEXT_TRACKING_FORCE -e NO_HZ_FULL_NODEF -e NO_HZ_FULL -e NO_HZ -e NO_HZ_COMMON -e CONTEXT_TRACKING
            ;;
        idle)
            scripts/config -d HZ_PERIODIC -d NO_HZ_FULL -e NO_HZ_IDLE -e NO_HZ -e NO_HZ_COMMON
            scripts/config -d RCU_NOCB_CPU -d TICK_CPU_ACCOUNTING -e VIRT_CPU_ACCOUNTING_GEN
            ;;
        *)
            _die "The value '$_ticktype' is invalid. Choose the correct one again."
    esac

    echo "Selecting '$_ticktype' tickless type..."

    ### Select preempt type
    [ -z "$_preempt" ] && _die "The value is empty. Choose the correct one again."

    case "$_preempt" in
        rt)
            scripts/config -d PREEMPT_NONE -d PREEMPT_VOLUNTARY -e PREEMPT -d PREEMPT_LAZY -d PREEMPT_DYNAMIC -e PREEMPT_RT
            scripts/config -e DRM_MGAG200_DISABLE_WRITECOMBINE;;
        dynamic)
            scripts/config -d PREEMPT_NONE -d PREEMPT_VOLUNTARY -e PREEMPT -d PREEMPT_LAZY -e PREEMPT_DYNAMIC -d PREEMPT_RT;;
        lazy)
            scripts/config -d PREEMPT_NONE -d PREEMPT_VOLUNTARY -d PREEMPT -e PREEMPT_LAZY -d PREEMPT_DYNAMIC -d PREEMPT_RT;;
        full)
            scripts/config -d PREEMPT_NONE -d PREEMPT_VOLUNTARY -e PREEMPT -d PREEMPT_LAZY -d PREEMPT_DYNAMIC -d PREEMPT_RT;;
        voluntary)
            scripts/config -d PREEMPT_NONE -e PREEMPT_VOLUNTARY -d PREEMPT -d PREEMPT_LAZY -d PREEMPT_DYNAMIC -d PREEMPT_RT;;
        *)
            _die "The value '$_preempt' is invalid. Choose the correct one again."
    esac

    echo "Selecting '$_preempt' preempt type..."

    if [ "$_buildtype" = "gcc" ]; then
        echo "Enabling KBUILD_CFLAGS -O2..."
        scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE_O3 -e CC_OPTIMIZE_FOR_PERFORMANCE
    else
        echo "Enabling KBUILD_CFLAGS -O3..."
        scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
    fi

    ### Enable bbr3
    if [[ "$_tcp_bbr3" =~ ^(yes|y|1)$ ]]; then
        echo "Disabling TCP_CONG_CUBIC..."
        scripts/config -m TCP_CONG_CUBIC \
            -d DEFAULT_CUBIC \
            -e TCP_CONG_BBR \
            -e DEFAULT_BBR \
            --set-str DEFAULT_TCP_CONG bbr \
            -m NET_SCH_FQ_CODEL \
            -e NET_SCH_FQ \
            -d CONFIG_DEFAULT_FQ_CODEL \
            -e CONFIG_DEFAULT_FQ
    fi

    ### Select THP
    [ -z "$_hugepage" ] && _die "The value is empty. Choose the correct one again."

    case "$_hugepage" in
        always) scripts/config -d TRANSPARENT_HUGEPAGE_MADVISE -e TRANSPARENT_HUGEPAGE_ALWAYS;;
        madvise) scripts/config -d TRANSPARENT_HUGEPAGE_ALWAYS -e TRANSPARENT_HUGEPAGE_MADVISE;;
        *) _die "The value '$_hugepage' is invalid. Choose the correct one again.";;
    esac

    echo "Selecting '$_hugepage' TRANSPARENT_HUGEPAGE config..."

    # Enable Clang AutoFDO
    if [[ "$_autofdo" =~ ^(yes|y|1)$ ]]; then
        scripts/config -e AUTOFDO_CLANG
    fi
    if [[ "$_autofdo" =~ ^(yes|y|1)$ && -n "$_autofdo_profile_name" ]]; then
        echo "AutoFDO profile has been found..."
        BUILD_FLAGS+=(CLANG_AUTOFDO_PROFILE="${srcdir}/${_autofdo_profile_name}")
    fi

    echo "Enabling USER_NS_UNPRIVILEGED"
    scripts/config -e USER_NS

    ### Run the config.sh script for kernel tuning
    if [[ -s "${srcdir}"/config.sh ]]; then
        echo "Further kernel customization. Running config.sh script..."
        bash "${srcdir}"/config.sh
    fi

    ### Optionally run the trim.sh script to trim the kernel
    if [[ "$_runtrim_script" =~ ^(yes|y|1)$ && -s "${srcdir}"/trim.sh ]]; then
        echo "Further kernel trimming. Running trim.sh script..."
        bash "${srcdir}"/trim.sh
    fi

    ### Optionally run the custom.sh script for custom tuning
    if [ -n "$custom_script" ]; then
        echo "Custom kernel tuning. Running custom.sh script..."
        bash "$custom_script"
    fi

    ### Optionally load needed modules for the make localmodconfig
    ### https://aur.archlinux.org/packages/modprobed-db
    ### https://github.com/Frogging-Family/linux-tkg (minimal-modprobed.db)
    if [[ "$_localmodcfg" =~ ^(yes|y|1)$ ]]; then
        echo "Running Steven Rostedt's make localmodconfig now"
        [ -e "$_localmodcfg_path" ] || _die "No modprobed.db data found"

        [[ "$_localmodcfg_minimal" =~ ^(yes|y|1)$ ]] && \
           echo "Including the modules in minimal-modprobed.db"

        ( cat "$_localmodcfg_path"
           [[ "$_localmodcfg_minimal" =~ ^(yes|y|1)$ ]] && \
              cat "${srcdir}"/minimal-modprobed.db
           # Include RAM disk, exfat, ntsync, ttm, and modules for Docker
           for module in \
              brd bridge exfat drm_ttm_helper llc irqbypass nf_conntrack \
              nf_conntrack_netlink nf_defrag_ipv4 nf_defrag_ipv6 \
              nf_nat nf_tables nft_chain_nat nft_compat ntsync \
              overlay stp ttm veth xfrm_algo xfrm_user xt_addrtype \
              xt_conntrack xt_MASQUERADE xt_nat xt_tcpudp \
           ;do echo "$module"; done
        ) | sort -u > "/tmp/modprobed.db.$$"

        make "${BUILD_FLAGS[@]}" LSMOD="/tmp/modprobed.db.$$" localmodconfig
        rm -f "/tmp/modprobed.db.$$"
    fi

    ### Rewrite configuration
    echo "Rewrite configuration..."
    make "${BUILD_FLAGS[@]}" -j3 prepare
    yes "" | make "${BUILD_FLAGS[@]}" config >/dev/null

    ### Prepared version
    make "${BUILD_FLAGS[@]}" -s kernelrelease > version
    echo "Prepared $pkgbase version $(<version)"

    ### Running make nconfig
    [[ "$_makenconfig" =~ ^(yes|y|1)$ ]] && make "${BUILD_FLAGS[@]}" nconfig

    ### Running make gconfig
    [[ "$_makegconfig" =~ ^(yes|y|1)$ ]] && make "${BUILD_FLAGS[@]}" gconfig

    ### Running make xconfig
    [[ "$_makexconfig" =~ ^(yes|y|1)$ ]] && make "${BUILD_FLAGS[@]}" xconfig

    ### Save configuration for later reuse
    echo "Save configuration for later reuse..."
    local basedir="$(dirname "$(readlink "${srcdir}/config")")"
    cat .config > "${basedir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"
}

build() {
    cd "$_srcname"

    ### Respect -jN flag in /etc/makepkg.conf
    local ncpu=$(grep "^MAKEFLAGS=" "/etc/makepkg.conf" | sed "s/^.*-j\([0-9]*\).*/\1/")
    [[ -z "$ncpu" || "$ncpu" = "MAKEFLAGS"* ]] && ncpu=$(nproc)

    ### Use grep to filter/silence harmless warnings
    make "${BUILD_FLAGS[@]}" -j"$ncpu" all 2>&1 | \
       grep -Ev '^  (AS|AR|CC|LD|BT|CE|CO|GE|HO|IN|IP|MK|OB|PA|PE|PO|RE|ST|TA|TE|UN|UP|VD|WR|X32)|: unexpected end of section|: unreachable instruction| missing __noreturn in | no .sframe will be created'

    ### In the case compiling with a later LLVM release, use the
    ### system toolchain for auto-detecting system features
    env PATH="/usr/bin:$PATH" make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1 | \
       grep -Ev '^  (AS|AR|CC|LD|BT|CE|CO|GE|HO|IN|IP|MK|OB|PA|PE|PO|RE|ST|TA|TE|UN|UP|VD|WR|X32)'
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules"
    depends=('coreutils' 'kmod' 'initramfs')
    optdepends=('wireless-regdb: to set the correct wireless channels of your country'
                'linux-firmware: firmware images needed for some devices'
                'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig'
                'scx-scheds: to use sched-ext schedulers')
    provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE V4L2LOOPBACK-MODULE NTSYNC-MODULE VHBA-MODULE ADIOS-MODULE)

    cd "$_srcname"

    local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

    echo "Installing boot image..."
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make "${BUILD_FLAGS[@]}" -s image_name)" "$modulesdir/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

    echo "Installing modules..."
    ZSTD_CLEVEL=6 make "${BUILD_FLAGS[@]}" INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
        DEPMOD=/doesnt/exist modules_install | grep -Ev '^  (IN|SI|ST|ZS)' # Suppress depmod

    # remove build links
    rm "$modulesdir"/build
}

_package-headers() {
    pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
    depends=('pahole' "${pkgbase}")

    if [[ "$buildtype" =~ (lto|clang) ]]; then
        depends+=(clang llvm lld)
    fi

    cd "${_srcname}"
    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

    echo "Installing build files..."
    install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
        localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
    install -Dt "$builddir/kernel" -m644 kernel/Makefile
    install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
    cp -t "$builddir" -a scripts
    ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

    # required when STACK_VALIDATION is enabled
    install -Dt "$builddir/tools/objtool" tools/objtool/objtool

    # required when DEBUG_INFO_BTF_MODULES is enabled
    if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
        install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
    fi

    echo "Installing headers..."
    cp -t "$builddir" -a include
    cp -t "$builddir/arch/x86" -a arch/x86/include
    install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
    install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # https://bugs.archlinux.org/task/20402
    install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

    echo "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

    # Install .rmeta files if they exist
    if compgen -G "rust/*.rmeta" 1>/dev/null; then
        install -Dt "$builddir/rust" -m644 rust/*.rmeta
    fi

    # Install .so files if they exist
    if compgen -G "rust/*.so" 1>/dev/null; then
        install -Dt "$builddir/rust" rust/*.so
    fi

    echo "Installing unstripped VDSO..."
    make INSTALL_MOD_PATH="$pkgdir/usr" vdso_install \
        link=  # Suppress build-id symlinks

    echo "Removing unneeded architectures..."
    local arch
    for arch in "$builddir"/arch/*/; do
        [[ $arch = */x86/ ]] && continue
        echo "Removing $(basename "$arch")"
        rm -r "$arch"
    done

    echo "Removing documentation..."
    rm -r "$builddir/Documentation"

    echo "Removing broken symlinks..."
    find -L "$builddir" -type l -printf 'Removing %P\n' -delete

    echo "Removing loose objects..."
    find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

    echo "Stripping build tools..."
    local file
    while read -rd '' file; do
        case "$(file -Sib "$file")" in
            application/x-sharedlib\;*)      # Libraries (.so)
                strip -v $STRIP_SHARED "$file" ;;
            application/x-archive\;*)        # Libraries (.a)
                strip -v $STRIP_STATIC "$file" ;;
            application/x-executable\;*)     # Binaries
                strip -v $STRIP_BINARIES "$file" ;;
            application/x-pie-executable\;*) # Relocatable binaries
                strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    echo "Stripping vmlinux..."
    strip -v $STRIP_STATIC "$builddir/vmlinux"

    echo "Adding symlink..."
    mkdir -p "$pkgdir/usr/src"
    ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-dbg(){
    pkgdesc="Non-stripped vmlinux file for the $pkgdesc kernel"
    depends=("${pkgbase}-headers")

    cd "${_srcname}"
    mkdir -p "$pkgdir/usr/src/debug/${pkgbase}"
    install -Dt "$pkgdir/usr/src/debug/${pkgbase}" -m644 vmlinux
}

pkgname=("$pkgbase")
[[ "$_build_debug" =~ ^(yes|y|1)$ ]] && pkgname+=("$pkgbase-dbg")
pkgname+=("$pkgbase-headers")
for _p in "${pkgname[@]}"; do
    eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
    }"
done

b2sums=('86d30cc03b13e13291c4f5e2da1087c5e6e4ef75513b26f89a1e2a4ed63c4d25fdb406b887ba1222a446f62b16fe2cccf7f4fa98778d5741e069b03a0d88d1fd'
        '305848d14ea0689811c325be823d0bea6abeaf7586f2b629018aed5ac00b42f7222ccfb642b8c0ec07cfbe23492ef9bcac982cedd00311c77ae25f17af772628'
        '43f10764ba04537e219451bb030cac9fdaef92c7d36bfb51c9bf1838ae8a8e6b6f202803b2c33ecfde56444107fa883ae1c10b9abce451cc5bd67b3d55542899'
        'd0b5a7a0bf638c93cc763c45164a38a55223c6349f92997e0136717fca41fb57891b73d8e599381940cd6d783a2a75088b3204b4d8fb86e2a108101b21625224'
        'aba53143ab07c080e0429ac7dd3f564a994882aef63f314abb09dcc90df0cd2657066b791d298c7449f810cc2f8310102c58238623c69f867b5a6aa42afa931f'
        'aed9f5fef17f4e7cd6bc45469dce9f210fb228edd31f483b98de797897ebff67702a784c34e018123f344c03665775293f9551ddc17a1bcfd437e3fa450d20ee'
        '52b28c591fe4070306b98f67020e097f0ea186bb7f017a33499e983af35348eab1f2be28a2dfbb3c4f1a9b04d552d0cd9f1d8e00812ca111450fcb5b1f2e6f28'
        '28edd4a776efa9292391ace92a0878062245f64d9fb3c9688f48348c7a8e6a477f9be7e61df592ec18c5a85e713e5b37adc08fa42f989fc60f9aefc02ef02e4e'
        '2853e6975cb9ea481918a85d63945cb50b421d7bb60dc1d511a42fe0a3bc06244bd16293f2674504f1ba6e6f3a15f3f19fcfac2a0ea06df9775d5f3f0afec171'
        'be0be4daed29fa02b38c2a92d44611db38e58888e25784432f95a8fc4d17e0d3e2f40c2d0b4f6c9ea7f471a423c6925f839cc237c32f376e1481a9be354de79e'
        '2fd0930475452aeb1d4ca2a46341afc7b860bdb86d9c0961be771120dd04803afdd6d50fb733e67a587ec410e3d31cdd327a6142eaa19621a1eb3b42a7154516'
        '764e6b9c5d3b7b6d6a252ff6d6fbbc1b7c7690307b3dc291ab7b984fa7bbbe6082a7a1c489e55ace75e9c288576ccee7fe9f3ef3756af7b34c1422e749e8ab48'
        '597d7df4d9d13aac5cce5af888637c0055d2ded860f947856c9e6f0496c8937eb61e3cc3e665932841921a3dc3d693ef540f66c5c2f3fad74842175056728707'
        '24f599d5efd2a375b3d184618a70ef716c6f55550f503c9e4de98b6de8546ac6ad7e807016f32a6464d4e54b9256921a2b53996b2940a9b79fbda817342b8f5a'
        'b63b83812fccc293a35e75782a58baf4a16afac31c74c5dd80e17c5d6d0832849e7acf47770cb2964def0b313fcf23ae21852f839b51c124be43084981727f18'
        '36b41b06f930926efee55d9160ff73579d1147f997f89e24438bba1a6687b16a1b7a64920de67ff8993e162e904348345e23a19c4ad3b6431c512d7a00dcae48'
        '33c70b59e828825904e520e1bee345dd707200c5a5bd79260a6a5d90b4ec52846c91547129cab7fef10e49b424a82910da98c2dec355d3a2a93ef13f322741fd'
        'de2b885964a53429321afe5df6808b01bfae5f4a0eac926e245849d8875d071c0630774a9bae0d77735371cf27ee281bdea800a671b699ce49a72468663a4d20'
        '119beeae8a6bf5320c1c5c213555750adfceb5b8133f3c6fb94dc990221816a9021a2264a3cf7cec6316196ffe61923c3d1acb91797a4ad9737d518ce26129af'
        '9496bcf15df84922bb140c20c8a7389c63d28a8c5979154dcc556308caffe0f98049f4074c33cc9dfe524a082d13b8a2b871f54adb428ef39ab410490aafa69c')
